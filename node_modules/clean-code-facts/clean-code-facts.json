[
	"Truth can only be found in one place: the code.",
	"It is not enough for code to work.",
	"Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. ...[Therefore,] making it easy to read makes it easier to write.",
	"So if you want to go fast, if you want to get done quickly, if you want your code to be easy to write, make it easy to read.",
	"Clean code is not written by following a set of rules. You don’t become a software craftsman by learning a list of heuristics. Professionalism and craftsmanship come from values that drive disciplines.",
	"A long descriptive name is better than a short enigmatic name. A long descriptive name is better than a long descriptive comment.",
	"You should name a variable using the same care with which you name a first-born child.",
	"Programmers must avoid leaving false clues that obscure the meaning of code.",
	"There are two parts to learning craftsmanship: knowledge and work. You must gain the knowledge of principles, patterns, practices, and heuristics that a craftsman knows, and you must also grind that knowledge into your fingers, eyes, and gut by working hard and practicing.",
	"Of course bad code can be cleaned up. But it’s very expensive.",
	"It is not the language that makes programs appear simple. It is the programmer that make the language appear simple!",
	"The problem isn’t the simplicity of the code but the implicity of the code (to coin a phrase): the degree to which the context is not explicit in the code itself.",
	"A system that is comprehensively tested and passes all of its tests all of the time is a testable system. That’s an obvious statement, but an important one. Systems that aren’t testable aren’t verifiable. Arguably, a system that cannot be verified should never be deployed.",
	"If the discipline of requirements specification has taught us anything, it is that well-specified requirements are as formal as code and can act as executable tests of that code!",
	"Redundant comments are just places to collect lies and misinformation.",
	"Clean code is simple and direct. Clean code reads like well-written prose. Clean code never obscures the designer’s intent but rather is full of crisp abstractions and straightforward lines of control.",
	"You know you are working on clean code when each routine turns out to be pretty much what you expected.",
	"Perhaps you thought that 'getting it working' was the first order of business for a professional developer. I hope by now, however, that this book has disabused you of that idea. The functionality that you create today has a good chance of changing in the next release, but the readability of your code will have a profound effect on all the changes that will ever be made.",
	"It is a myth that we can get systems 'right the first time.' Instead, we should implement only today’s stories, then refactor and expand the system to implement new stories tomorrow. This is the essence of iterative and incremental agility. Test-driven development, refactoring, and the clean code they produce make this work at the code level.",
	"Objects hide their data behind abstractions and expose functions that operate on that data. Data structure expose their data and have no meaningful functions.",
	"Error handling is important, but if it obscures logic, it’s wrong.",
	"Learning to write clean code is hard work. It requires more than just the knowledge of principles and patterns. You must sweat over it. You must practice it yourself, and watch yourself fail. You must watch others practice it and fail. You must see them stumble and retrace their steps. You must see them agonize over decisions and see the price they pay for making those decisions the wrong way.",
	"When you see commented-out code, delete it!",
	"The only way to make the deadline—the only way to go fast—is to keep the code as clean as possible at all times.",
	"Because this ratio is so high, we want the reading of code to be easy, even if it makes the writing harder. Of course there’s no way to write code without reading it, so making it easy to read actually makes it easier to write.",
	"Clean code always looks like it was written by someone who cares.",
	"the ratio of time spent reading vs. writing is well over 10:1",
	"Professionals use their powers for good and write code that others can understand.",
	"The first rule of functions is that they should be small. The second rule of functions is that they should be smaller than that.",
	"Cuteness in code often appears in the form of colloquialisms or slang. For example, don’t use the name whack() to mean kill(). Don’t tell little culture-dependent jokes like eatMyShorts() to mean abort(). Say what you mean. Mean what you say.",
	"If you let the tests rot, then your code will rot too. Keep your tests clean.",
	"Nothing has a more profound and long-term degrading effect upon a development project than bad code. Bad schedules can be redone, bad requirements can be redefined. Bad team dynamics can be repaired. But bad code rots and ferments, becoming an inexorable weight that drags the team down.",
	"Try to write tests that force exceptions, and then add behavior to your handler to satisfy your tests. This will cause you to build the transaction scope of the try block first and will help you maintain the transaction nature of that scope.",
	"It is unit tests that keep our code flexible, maintainable, and reusable. The reason is simple. If you have tests, you do not fear making changes to the code! Without tests every change is a possible bug.",
	"In an ideal system, we incorporate new features by extending the system, not by making modifications to existing code.",
	"Duplication may be the root of all evil in software. Many principles and practices have been created for the purpose of controlling or eliminating it.",
	"Whatever else a TODO might be, it is not an excuse to leave bad code in the system.",
	"Complexity kills. It sucks the life out of developers, it makes products difficult to plan, build, and test. - Ray Ozzie, CTO, Microsoft Corporation",
	"It is not enough for code to work. Code that works is often badly broken. Programmers who satisfy themselves with merely working code are behaving unprofessionally. They may fear that they don’t have time to improve the structure and design of their code, but I disagree. Nothing has a more profound and long-term degrading effect upon a development project than bad code.",
	"No matter how elegant it is, no matter how readable and accessible, if it hath not tests, it be unclean.",
	"First Law You may not write production code until you have written a failing unit test. Second Law You may not write more of a unit test than is sufficient to fail, and not compiling is failing. Third Law You may not write more production code than is sufficient to pass the currently failing test.",
	"Clean code is focused. Each function, each class, each module exposes a single-minded attitude that remains entirely undistracted, and unpolluted, by the surrounding details.",
	"We want to avoid forcing our readers to hop around through our source files and classes.",
	"Any comment that forces you to look in another module for the meaning of that comment has failed to communicate to you and is not worth the bits it consumes.",
	"Test code is just as important as production code. It is not a second-class citizen. It requires thought, design, and care. It must be kept as clean as production code.",
	"Were you trying to go fast? Were you in a rush? Probably so. Perhaps you felt that you didn’t have time to do a good job; that your boss would be angry with you if you took the time to clean up your code. Perhaps you were just tired of working on this program and wanted it to be over. Or maybe you looked at the backlog of other stuff that you had promised to get done and realized that you needed to slam this module together so you could move on to the next. We’ve all done it. We’ve all looked at the mess we’ve just made and then have chosen to leave it for another day. We’ve all felt the relief of seeing our messy program work and deciding that a working mess is better than nothing. We’ve all said we’d go back and clean it up later. Of course, in those days we didn’t know LeBlanc’s law: Later equals never.",
	"Remember the boy-scout rule: Leave the campground cleaner than you found it.",
	"Functions should only do 'one thing' and in order to make sure our functions are doing 'one thing', we need to make sure that the statements within the function are all at the same level of abstraction.",
	"Elegant, simple code makes it hard for bugs to hide."
]
